// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  SHIPPED
  CANCELLED
}

model Author {
  id    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String       @db.VarChar(255)
  bio   String?
  books BookAuthor[]
}

model Genre {
  id    String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String      @unique @db.VarChar(100)
  books BookGenre[]
}

model Book {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug          String
  title         String       @db.VarChar(255)
  price         Decimal      @db.Decimal(10, 2)
  stock         Int
  isbn          String       @unique @db.VarChar(20)
  publishedDate DateTime     @db.Date
  imagePath     String?      @db.VarChar(255)
  description   String?
  authors       BookAuthor[]
  genres        BookGenre[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  rating        Decimal      @default(0) @db.Decimal(3, 2)
  numReviews    Int          @default(0)
  Review        Review[]
}

model BookAuthor {
  book     Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  bookId   String @db.Uuid
  authorId String @db.Uuid

  @@id([bookId, authorId])
}

model BookGenre {
  book    Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  bookId  String @db.Uuid
  genreId String @db.Uuid

  @@id([bookId, genreId])
}

model User {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @default("NO_NAME")
  email         String          @unique(map: "user_email_idx")
  emailVerified DateTime?       @db.Timestamp(6)
  image         String?
  password      String?
  role          UserRole        @default(USER)
  paymentMethod String?
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime        @updatedAt
  account       Account[]
  session       Session[]
  cart          Cart[]
  orders        PurchaseOrder[]
  addresses     Address[]
  Review        Review[]
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String     @unique @db.Uuid
  totalPrice Decimal    @default(0.0) @db.Decimal(10, 2)
  items      CartItem[]
}

model CartItem {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cart     Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId   String  @db.Uuid
  book     Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId   String  @db.Uuid
  quantity Int
  price    Decimal @db.Decimal(10, 2)
}

model PurchaseOrder {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String      @db.Uuid
  totalCost  Decimal     @db.Decimal(10, 2)
  status     OrderStatus @default(PENDING)
  placedDate DateTime    @default(now())
  items      OrderItem[]
  address    Address?    @relation(fields: [addressId], references: [id], onDelete: SetNull)
  addressId  String?     @db.Uuid
}

model OrderItem {
  id       String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order    PurchaseOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String        @db.Uuid
  book     Book          @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId   String        @db.Uuid
  quantity Int
  price    Decimal       @db.Decimal(10, 2)
}

model Address {
  id        String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String          @db.Uuid
  address   String          @db.VarChar(500)
  city      String          @db.VarChar(100)
  state     String          @db.VarChar(100)
  country   String          @db.VarChar(100)
  pinCode   String          @db.VarChar(20)
  isDefault Boolean         @default(false)
  orders    PurchaseOrder[]
}

model Review {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @db.Uuid
  bookId             String   @db.Uuid
  rating             Int
  title              String
  description        String
  isVerifiedPurchase Boolean  @default(true)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  book               Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
